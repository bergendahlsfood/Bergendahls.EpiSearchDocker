# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-2019'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'd32f9265-829e-4083-98cf-d4b23563713d'
  imageRepository: 'internal-episerver-search'
  containerRegistry: 'bfoecomcontainer.azurecr.io'
  dockerfilePath: './Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'bfoecomcontainer5374b94b-auth'

  # Agent VM image name
  vmImageName: "windows-2019"
  projectName: "Episerver.Search"
  websiteName: "Episerver.Search"
  appPoolName: "Episerver.Search"


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        feedsToUse: 'config'
        nugetConfigPath: './NuGet.config'

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArchitecture: 'x64'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArguments: '/p:PublishProfile=FolderProfile /p:DeployOnBuild=true'
    
    - task: Docker@2
      condition: succeeded()
      displayName: Build and push api image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishBuildArtifacts@1
      condition: succeeded()
      displayName: 'Publish artifact'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/publish'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DEPLOY_PRELOADED
  displayName: Deploy preloaded
  condition: succeeded()
  dependsOn: Build
  variables:
    BGD_ENV: 'preloaded'

  jobs:
  - deployment: DEPLOY_PRELOADED
    displayName: Deploy preloaded
    condition: succeeded()
    pool:
      vmImage: $(vmImageName)
    environment:
      name: "Preloaded-VM-search-3"
      resourceType: VirtualMachine
    variables:
      - name: websitePhysicalPath
        value: '%SystemDrive%\inetpub\wwwroot\$(websiteName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: IISWebAppManagementOnMachineGroup@0
            inputs:
              IISDeploymentType: "IISWebsite"
              ActionIISWebsite: "CreateOrUpdateWebsite"
              WebsiteName: "$(websiteName)"
              WebsitePhysicalPath: "$(websitePhysicalPath)"
              WebsitePhysicalPathAuth: "WebsiteUserPassThrough"
              CreateOrUpdateAppPoolForWebsite: true
              AppPoolNameForWebsite: "$(appPoolName)"
              DotNetVersionForWebsite: "v4.0"
              PipeLineModeForWebsite: "Integrated"
              AppPoolIdentityForWebsite: "ApplicationPoolIdentity"
              AddBinding: true
              Bindings: |
                {
                    bindings:[
                        {
                            "protocol":"http",
                            "ipAddress":"",
                            "hostname":"",
                            "port":"8080",
                            "sslThumbprint":"",
                            "sniFlag":false
                        }
                    ]
                }
          - task: IISWebAppDeploymentOnMachineGroup@0
            inputs:
              WebSiteName: "$(websiteName)"
              Package: "$(Pipeline.Workspace)/drop"
          - task: IISWebAppManagementOnMachineGroup@0
            inputs:
              IISDeploymentType: "IISWebsite"
              ActionIISWebsite: "StartWebsite"
              StartStopWebsiteName: "$(websiteName)"